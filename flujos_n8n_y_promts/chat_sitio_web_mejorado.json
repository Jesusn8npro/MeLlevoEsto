{
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2112,
        64
      ],
      "id": "38a45517-28bf-4ad6-99e5-fb537271c4dd",
      "name": "Responder"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "response-assignment",
              "name": "respuesta_final",
              "value": "={{ $json.output }}",
              "type": "string"
            },
            {
              "id": "metadata-assignment",
              "name": "metadata",
              "value": "={{ { chat_id: $('Procesar Datos Entrada').item.json.chat_id, timestamp: new Date().toISOString(), usuario: $('Procesar Datos Entrada').item.json.nombre || 'visitante', autenticado: $('Procesar Datos Entrada').item.json.autenticado } }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1904,
        64
      ],
      "id": "28734024-4484-4a6f-a3cb-985c1a106ba0",
      "name": "Preparar Respuesta"
    },
    {
      "parameters": {
        "useCustomSchema": true,
        "operation": "update",
        "tableId": "leads_chat",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "chat_id",
              "condition": "eq",
              "keyValue": "={{ $('Procesar Datos Entrada').item.json.chat_id || $('Webhook').item.json.body?.chatId || $json.chat_id || $json.chatId }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "chat_id",
              "fieldValue": "={{ $('Procesar Datos Entrada').item.json.chat_id || $('Webhook').item.json.body?.chatId || $json.chat_id || $json.chatId }}"
            },
            {
              "fieldId": "intereses_cliente",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('intereses_cliente', 'Producto de interés o categoría', 'string') || undefined }}"
            },
            {
              "fieldId": "tecnicas_persuasion",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tecnicas_persuasion', 'Técnicas de persuasión usadas', 'string') || undefined }}"
            },
            {
              "fieldId": "nivel_interes",
              "fieldValue": "={{ (v => isNaN(v) ? undefined : Math.max(0, Math.min(10, v)))(Number($fromAI('nivel_interes','Nivel de interés (1-10)','number'))) }}"
            },
            {
              "fieldId": "probabilidad_compra",
              "fieldValue": "={{ (p => isNaN(p) ? undefined : Math.max(0, Math.min(100, p)))(Number($fromAI('probabilidad_compra','Probabilidad de compra (1-100)','number'))) }}"
            },
            {
              "fieldId": "principales_objeciones",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('objeciones_principales', 'Objeciones principales', 'string') || undefined }}"
            },
            {
              "fieldId": "miedos_cliente",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('miedos_cliente', 'Miedos del cliente', 'string') || undefined }}"
            },
            {
              "fieldId": "urgencia_compra",
              "fieldValue": "={{ (() => { const u = ($fromAI('urgencia_compra','Urgencia de compra','string') || '').toString().trim().toLowerCase(); const allowed = ['inmediata','alta','media','baja']; return allowed.includes(u) ? u : undefined; })() }}"
            },
            {
              "fieldId": "valor_potencial",
              "fieldValue": "={{ (n => isNaN(n) ? undefined : Number(n))(Number($fromAI('valor_potencial','Valor potencial estimado','number'))) }}"
            },
            {
              "fieldId": "contexto_inicial",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('contexto_inicial','Contexto inicial del cliente','string') || undefined }}"
            },
            {
              "fieldId": "metodo_pago_preferido",
              "fieldValue": "={{ (() => { const raw = ($fromAI('metodo_pago_preferido','Método de pago preferido','string') || '').toString().trim().toLowerCase(); const allowed = ['contraentrega','transferencia','tarjeta','nequi','daviplata','pse']; return allowed.includes(raw) ? raw : undefined; })() }}"
            },
            {
              "fieldId": "ubicacion_usuario",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('ubicacion_usuario','Ubicación del usuario','string') || $('Procesar Datos Entrada').item.json.ciudad || undefined }}"
            },
            {
              "fieldId": "productos_consultados",
              "fieldValue": "={{ (() => { const v = $fromAI('productos_consultados','Productos consultados','array'); const arr = Array.isArray(v) ? v : (typeof v === 'string' ? v.split(',').map(s => s.trim()).filter(Boolean) : undefined); return arr && arr.length ? arr : undefined; })() }}"
            },
            {
              "fieldId": "precio_maximo_mencionado",
              "fieldValue": "={{ (n => isNaN(n) ? undefined : Number(n))(Number($fromAI('precio_maximo_mencionado','Precio máximo mencionado','number'))) }}"
            },
            {
              "fieldId": "datos_envio",
              "fieldValue": "={{ (() => { const obj = $fromAI('datos_envio','Datos de envío','object'); const metodo = (() => { const raw = ($fromAI('metodo_pago_preferido','Método de pago preferido','string') || '').toString().trim().toLowerCase(); const allowed = ['contraentrega','transferencia','tarjeta','nequi','daviplata','pse']; return allowed.includes(raw) ? raw : undefined; })(); const base = { ciudad: $('Procesar Datos Entrada').item.json.ciudad || undefined, direccion: $('Procesar Datos Entrada').item.json.direccion || undefined, whatsapp: $('Procesar Datos Entrada').item.json.whatsapp || undefined, metodo_pago_preferido: metodo }; const merged = (obj && typeof obj === 'object') ? { ...base, ...obj } : base; return Object.values(merged).some(v => v !== undefined && v !== '') ? merged : undefined; })() }}"
            },
            {
              "fieldId": "notas_adicionales",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('notas_adicionales', 'Notas adicionales', 'string') || 'Captura de interés automática' }}"
            },
            {
              "fieldId": "ultima_actualizacion",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        2096,
        800
      ],
      "id": "995664c6-41a9-40d4-8e5c-41a0bccd57b1",
      "name": "capturar_interes_avanzado",
      "credentials": {
        "supabaseApi": {
          "id": "W8gqsCw5s1YHm5SZ",
          "name": "Supabase Me LLEVO ESTO"
        }
      }
    },
    {
      "parameters": {
        "tableId": "leads_chat",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "chat_id",
              "fieldValue": "={{ $('Procesar Datos Entrada').item.json.chat_id || $('Webhook').item.json.body?.chatId || $json.chat_id || $json.chatId || new Date().getTime().toString() }}"
            },
            {
              "fieldId": "nombre",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('nombre', 'Nombre del cliente', 'string') || $('Procesar Datos Entrada').item.json.nombre || undefined }}"
            },
            {
              "fieldId": "apellido",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('apellido', 'Apellido del cliente', 'string') || $('Procesar Datos Entrada').item.json.apellido || undefined }}"
            },
            {
              "fieldId": "email",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('email', 'Correo del cliente', 'string') || $('Procesar Datos Entrada').item.json.email_usuario || undefined }}"
            },
            {
              "fieldId": "whatsapp",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('whatsapp', 'WhatsApp del cliente', 'string') || $('Procesar Datos Entrada').item.json.whatsapp || undefined }}"
            },
            {
              "fieldId": "tipo_consulta",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tipo_consulta', 'Tipo de consulta', 'string') || $('Procesar Datos Entrada').item.json.tipo_consulta || undefined }}"
            },
            {
              "fieldId": "ciudad",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('ciudad', 'Ciudad del cliente', 'string') || $('Procesar Datos Entrada').item.json.ciudad || undefined }}"
            },
            {
              "fieldId": "direccion",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('direccion', 'Dirección del cliente', 'string') || $('Procesar Datos Entrada').item.json.direccion || undefined }}"
            },
            {
              "fieldId": "contexto_inicial",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('contexto_inicial','Contexto inicial del cliente','string') || $('Procesar Datos Entrada').item.json.mensaje_del_usuario || undefined }}"
            },
            {
              "fieldId": "fecha_primer_contacto",
              "fieldValue": "={{ $('Procesar Datos Entrada').item.json.timestamp || new Date().toISOString() }}"
            },
            {
              "fieldId": "ubicacion_usuario",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('ubicacion_usuario','Ubicación del usuario','string') || $('Procesar Datos Entrada').item.json.ciudad || undefined }}"
            },
            {
              "fieldId": "metodo_pago_preferido",
              "fieldValue": "={{ (() => { const raw = ($fromAI('metodo_pago_preferido','Método de pago preferido','string') || '').toString().trim().toLowerCase(); const allowed = ['contraentrega','transferencia','tarjeta','nequi','daviplata','pse']; return allowed.includes(raw) ? raw : undefined; })() }}"
            },
            {
              "fieldId": "productos_consultados",
              "fieldValue": "={{ (() => { const v = $fromAI('productos_consultados','Productos consultados','array'); const arr = Array.isArray(v) ? v : (typeof v === 'string' ? v.split(',').map(s => s.trim()).filter(Boolean) : undefined); return arr && arr.length ? arr : undefined; })() }}"
            },
            {
              "fieldId": "precio_maximo_mencionado",
              "fieldValue": "={{ (n => isNaN(n) ? undefined : Number(n))(Number($fromAI('precio_maximo_mencionado','Precio máximo mencionado','number'))) }}"
            },
            {
              "fieldId": "datos_envio",
              "fieldValue": "={{ (() => { const obj = $fromAI('datos_envio','Datos de envío','object'); const metodo = (() => { const raw = ($fromAI('metodo_pago_preferido','Método de pago preferido','string') || '').toString().trim().toLowerCase(); const allowed = ['contraentrega','transferencia','tarjeta','nequi','daviplata','pse']; return allowed.includes(raw) ? raw : undefined; })(); const base = { ciudad: $('Procesar Datos Entrada').item.json.ciudad || undefined, direccion: $('Procesar Datos Entrada').item.json.direccion || undefined, whatsapp: $('Procesar Datos Entrada').item.json.whatsapp || undefined, metodo_pago_preferido: metodo }; const merged = (obj && typeof obj === 'object') ? { ...base, ...obj } : base; return Object.values(merged).some(v => v !== undefined && v !== '') ? merged : undefined; })() }}"
            },
            {
              "fieldId": "pagina_origen",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('pagina_origen', 'Página de origen', 'string') || $('Procesar Datos Entrada').item.json.pagina_origen || undefined }}"
            },
            {
              "fieldId": "source",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('source', 'Fuente del lead', 'string') || $('Procesar Datos Entrada').item.json.plataforma || 'web' }}"
            },
            {
              "fieldId": "intereses_cliente",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('intereses_cliente', 'Producto o interés', 'string') || undefined }}"
            },
            {
              "fieldId": "tecnicas_persuasion",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tecnicas_persuasion', 'Técnicas usadas', 'string') || undefined }}"
            },
            {
              "fieldId": "nivel_interes",
              "fieldValue": "={{ (v => isNaN(v) ? undefined : Math.max(0, Math.min(10, v)))(Number($fromAI('nivel_interes','Nivel de interés (1-10)','number'))) }}"
            },
            {
              "fieldId": "probabilidad_compra",
              "fieldValue": "={{ (p => isNaN(p) ? undefined : Math.max(0, Math.min(100, p)))(Number($fromAI('probabilidad_compra','Probabilidad de compra (1-100)','number'))) }}"
            },
            {
              "fieldId": "principales_objeciones",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('objeciones_principales', 'Objeciones principales', 'string') || undefined }}"
            },
            {
              "fieldId": "miedos_cliente",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('miedos_cliente', 'Miedos del cliente', 'string') || undefined }}"
            },
            {
              "fieldId": "urgencia_compra",
              "fieldValue": "={{ (() => { const u = ($fromAI('urgencia_compra','Urgencia de compra','string') || '').toString().trim().toLowerCase(); const allowed = ['inmediata','alta','media','baja']; return allowed.includes(u) ? u : undefined; })() }}"
            },
            {
              "fieldId": "valor_potencial",
              "fieldValue": "={{ (n => isNaN(n) ? undefined : Number(n))(Number($fromAI('valor_potencial','Valor potencial estimado','number'))) }}"
            },
            {
              "fieldId": "notas_adicionales",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('notas_adicionales', 'Notas adicionales', 'string') || undefined }}"
            },
            {
              "fieldId": "converted",
              "fieldValue": "={{ $('Procesar Datos Entrada').item.json.autenticado || false }}"
            },
            {
              "fieldId": "ultima_actualizacion",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        2352,
        800
      ],
      "id": "e80b7408-f65b-4a8d-b3f3-d421761e3e95",
      "name": "crear_lead_nuevo",
      "credentials": {
        "supabaseApi": {
          "id": "W8gqsCw5s1YHm5SZ",
          "name": "Supabase Me LLEVO ESTO"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "leads_chat",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "chat_id",
              "condition": "eq",
              "keyValue": "={{ $('Procesar Datos Entrada').item.json.chat_id || $('Webhook').item.json.body?.chatId || $json.chat_id || $json.chatId }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "nombre",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('nombre', 'Nombre del cliente', 'string') || $('Procesar Datos Entrada').item.json.nombre || undefined }}"
            },
            {
              "fieldId": "apellido",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('apellido', 'Apellido del cliente', 'string') || $('Procesar Datos Entrada').item.json.apellido || undefined }}"
            },
            {
              "fieldId": "email",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('email', 'Correo del cliente', 'string') || $('Procesar Datos Entrada').item.json.email_usuario || undefined }}"
            },
            {
              "fieldId": "whatsapp",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('whatsapp', 'WhatsApp del cliente', 'string') || $('Procesar Datos Entrada').item.json.whatsapp || undefined }}"
            },
            {
              "fieldId": "tipo_consulta",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tipo_consulta', 'Tipo de consulta', 'string') || $('Procesar Datos Entrada').item.json.tipo_consulta || undefined }}"
            },
            {
              "fieldId": "ciudad",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('ciudad', 'Ciudad del cliente', 'string') || $('Procesar Datos Entrada').item.json.ciudad || undefined }}"
            },
            {
              "fieldId": "direccion",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('direccion', 'Dirección del cliente', 'string') || $('Procesar Datos Entrada').item.json.direccion || undefined }}"
            },
            {
              "fieldId": "contexto_inicial",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('contexto_inicial','Contexto inicial del cliente','string') || undefined }}"
            },
            {
              "fieldId": "ubicacion_usuario",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('ubicacion_usuario','Ubicación del usuario','string') || $('Procesar Datos Entrada').item.json.ciudad || undefined }}"
            },
            {
              "fieldId": "metodo_pago_preferido",
              "fieldValue": "={{ (() => { const raw = ($fromAI('metodo_pago_preferido','Método de pago preferido','string') || '').toString().trim().toLowerCase(); const allowed = ['contraentrega','transferencia','tarjeta','nequi','daviplata','pse']; return allowed.includes(raw) ? raw : undefined; })() }}"
            },
            {
              "fieldId": "productos_consultados",
              "fieldValue": "={{ (() => { const v = $fromAI('productos_consultados','Productos consultados','array'); const arr = Array.isArray(v) ? v : (typeof v === 'string' ? v.split(',').map(s => s.trim()).filter(Boolean) : undefined); return arr && arr.length ? arr : undefined; })() }}"
            },
            {
              "fieldId": "precio_maximo_mencionado",
              "fieldValue": "={{ (n => isNaN(n) ? undefined : Number(n))(Number($fromAI('precio_maximo_mencionado','Precio máximo mencionado','number'))) }}"
            },
            {
              "fieldId": "datos_envio",
              "fieldValue": "={{ (() => { const obj = $fromAI('datos_envio','Datos de envío','object'); const metodo = (() => { const raw = ($fromAI('metodo_pago_preferido','Método de pago preferido','string') || '').toString().trim().toLowerCase(); const allowed = ['contraentrega','transferencia','tarjeta','nequi','daviplata','pse']; return allowed.includes(raw) ? raw : undefined; })(); const base = { ciudad: $('Procesar Datos Entrada').item.json.ciudad || undefined, direccion: $('Procesar Datos Entrada').item.json.direccion || undefined, whatsapp: $('Procesar Datos Entrada').item.json.whatsapp || undefined, metodo_pago_preferido: metodo }; const merged = (obj && typeof obj === 'object') ? { ...base, ...obj } : base; return Object.values(merged).some(v => v !== undefined && v !== '') ? merged : undefined; })() }}"
            },
            {
              "fieldId": "pagina_origen",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('pagina_origen', 'Página de origen', 'string') || $('Procesar Datos Entrada').item.json.pagina_origen || undefined }}"
            },
            {
              "fieldId": "source",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('source', 'Fuente del lead', 'string') || $('Procesar Datos Entrada').item.json.plataforma || 'web' }}"
            },
            {
              "fieldId": "intereses_cliente",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('intereses_cliente', 'Producto o interés', 'string') || undefined }}"
            },
            {
              "fieldId": "tecnicas_persuasion",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tecnicas_persuasion', 'Técnicas usadas', 'string') || undefined }}"
            },
            {
              "fieldId": "nivel_interes",
              "fieldValue": "={{ (v => isNaN(v) ? undefined : Math.max(0, Math.min(10, v)))(Number($fromAI('nivel_interes','Nivel de interés (1-10)','number'))) }}"
            },
            {
              "fieldId": "probabilidad_compra",
              "fieldValue": "={{ (p => isNaN(p) ? undefined : Math.max(0, Math.min(100, p)))(Number($fromAI('probabilidad_compra','Probabilidad de compra (1-100)','number'))) }}"
            },
            {
              "fieldId": "principales_objeciones",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('objeciones_principales', 'Objeciones principales', 'string') || undefined }}"
            },
            {
              "fieldId": "miedos_cliente",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('miedos_cliente', 'Miedos del cliente', 'string') || undefined }}"
            },
            {
              "fieldId": "urgencia_compra",
              "fieldValue": "={{ (() => { const u = ($fromAI('urgencia_compra','Urgencia de compra','string') || '').toString().trim().toLowerCase(); const allowed = ['inmediata','alta','media','baja']; return allowed.includes(u) ? u : undefined; })() }}"
            },
            {
              "fieldId": "valor_potencial",
              "fieldValue": "={{ (n => isNaN(n) ? undefined : Number(n))(Number($fromAI('valor_potencial','Valor potencial estimado','number'))) }}"
            },
            {
              "fieldId": "notas_adicionales",
              "fieldValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('notas_adicionales', 'Notas adicionales', 'string') || undefined }}"
            },
            {
              "fieldId": "converted",
              "fieldValue": "={{ $('Procesar Datos Entrada').item.json.autenticado || false }}"
            },
            {
              "fieldId": "ultima_actualizacion",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        2384,
        368
      ],
      "id": "02009f36-8ed3-4ed8-92b2-4587c469cf32",
      "name": "actualizar_lead_filtrado",
      "credentials": {
        "supabaseApi": {
          "id": "W8gqsCw5s1YHm5SZ",
          "name": "Supabase Me LLEVO ESTO"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "producto_imagenes",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        1488,
        800
      ],
      "id": "3bd7f8a7-8efa-4b5e-9196-133106f750ec",
      "name": "consultar_imagenes",
      "credentials": {
        "supabaseApi": {
          "id": "W8gqsCw5s1YHm5SZ",
          "name": "Supabase Me LLEVO ESTO"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "leads_chat",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "chat_id",
              "condition": "eq",
              "keyValue": "={{ $('Procesar Datos Entrada').item.json.chat_id || $('Webhook').item.json.body?.chatId || $json.chat_id || $json.chatId }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        1872,
        784
      ],
      "id": "86f12751-1f8c-4463-a8d7-fa557889c0dd",
      "name": "consultar_lead_por_chat_id",
      "credentials": {
        "supabaseApi": {
          "id": "W8gqsCw5s1YHm5SZ",
          "name": "Supabase Me LLEVO ESTO"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "pedidos",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        1312,
        816
      ],
      "id": "b9a8ea47-1ae1-4cc9-b536-923f1b92849f",
      "name": "consultar_pedidos",
      "credentials": {
        "supabaseApi": {
          "id": "W8gqsCw5s1YHm5SZ",
          "name": "Supabase Me LLEVO ESTO"
        }
      }
    },
    {
      "parameters": {
        "useCustomSchema": true,
        "operation": "getAll",
        "tableId": "productos",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        1088,
        720
      ],
      "id": "e93f2819-677e-40eb-86d0-3dea41627052",
      "name": "buscar_productos",
      "credentials": {
        "supabaseApi": {
          "id": "W8gqsCw5s1YHm5SZ",
          "name": "Supabase Me LLEVO ESTO"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Procesar Datos Entrada').item.json.chat_id || $('Webhook').item.json.body?.chatId || $json.chat_id || $json.chatId || new Date().getTime().toString() }}",
        "tableName": "chats_de_la_web",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        544,
        496
      ],
      "id": "29278ea8-efd7-4078-8549-b86dd1123204",
      "name": "Memoria Chat",
      "credentials": {
        "postgres": {
          "id": "SQbjeiNAyY3q7eu9",
          "name": "Postgrest Me Llevo Esto"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        928,
        464
      ],
      "id": "57f63292-f69b-42b0-b11b-cd748b82bdb7",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "BF6TLMzAguxXUoJp",
          "name": "Api Chat GPT"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.mensaje_del_usuario }}",
        "options": {
          "systemMessage": "=Eres Natalia París 💁‍♀️, la vendedora #1 de MeLlevoEsto.com. Tu ÚNICA misión es VENDER y generar leads de calidad.\n\n🎯 TU OBJETIVO: Convertir cada conversación en una VENTA o capturar información valiosa del cliente.\n\n💬 PERSONALIDAD VENDEDORA\n- Habla como una vendedora colombiana exitosa, cálida pero directa\n- Usa emojis estratégicamente (máximo 2 por mensaje)\n- Respuestas CORTAS: máximo 2 líneas\n- Siempre termina con una pregunta que invite a comprar\n- Crea URGENCIA y ESCASEZ en cada mensaje\n\n🔥 TÉCNICAS DE VENTA OBLIGATORIAS\n\n1️⃣ ESCASEZ INMEDIATA:\n- \"Solo quedan 2 unidades 🔥\"\n- \"Esta oferta termina HOY\"\n- \"El último cliente se llevó 3, te queda 1\"\n\n2️⃣ PRUEBA SOCIAL:\n- \"Producto más vendido esta semana\"\n- \"15 personas lo compraron hoy\"\n- \"Cliente de Medellín acaba de pedir 2\"\n\n3️⃣ VALOR AGREGADO:\n- \"Envío GRATIS si confirmas ahora\"\n- \"Te regalo la funda si pides hoy\"\n- \"Descuento especial solo para ti\"\n\n⚙️ HERRAMIENTAS (úsalas SIEMPRE que corresponda):\n\n🔍 buscar_productos: Cuando mencionen cualquier producto\n📸 consultar_imagenes: Para mostrar fotos del producto\n📝 actualizar_lead_filtrado: Cuando den datos personales y ya exista el lead\n➕ crear_lead_nuevo: Cuando aún no exista el lead\n🎯 capturar_interes_avanzado: Cuando muestren interés\n📋 consultar_pedidos: Para revisar pedidos existentes\n\n🧠 CAPTURA AUTOMÁTICA DE LEAD DURANTE TODA LA CONVERSACIÓN (OBLIGATORIO)\n- Mantén un checklist interno y ve marcando datos capturados.\n- Si falta un dato, pídelo de a UNO por mensaje, sin interrumpir la venta.\n- No repitas preguntas si el dato ya está. Valida y corrige si el cliente cambia.\n\n✅ CHECKLIST DE DATOS A CAPTURAR\n- nombre, apellido\n- email\n- whatsapp\n- ciudad, dirección\n- tipo_consulta (compra, soporte, envío, devolución, otro)\n- intereses_cliente / producto de interés\n- pagina_origen (ya llega del sistema)\n\n📄 ARGUMENTOS PARA HERRAMIENTAS (JSON ESTRICTO)\n- Al llamar \"crear_lead_nuevo\" y \"actualizar_lead_filtrado\", envía los campos disponibles: nombre, apellido, email, whatsapp, ciudad, direccion, tipo_consulta, pagina_origen, source, intereses_cliente, tecnicas_persuasion, nivel_interes (1-10), probabilidad_compra (0-100), urgencia_compra (inmediata|alta|media|baja), principales_objeciones, miedos_cliente, valor_potencial (número), notas_adicionales, converted, contexto_inicial, fecha_primer_contacto (ISO), productos_consultados (array), precio_maximo_mencionado (número), ubicacion_usuario, metodo_pago_preferido (contraentrega|transferencia|tarjeta|nequi|daviplata|pse), datos_envio (objeto).\n- No envíes campos vacíos ni null; sólo valores válidos.\n- No sobrescribas \"fecha_primer_contacto\" si ya existe.\n\n📸 USO DE CONSULTAR_IMAGENES\n- Devuelve \"imagen_principal\", \"imagen_secundaria_1\" (Imagen 2) y \"imagen_secundaria_2\" (Imagen 3).\n- Si el cliente pide fotos, llama la herramienta y agrega a \"productos_consultados\" objetos con {producto_id, nombre, imagen_principal, imagen_2, imagen_3, precio}.\n\n🔄 FLUJO DE GUARDADO PROGRESIVO (OBLIGATORIO, EN CADA MENSAJE)\n1) Primero llama \"consultar_lead_por_chat_id\" usando chat_id actual.\n2) Si NO existe, crea el registro con \"crear_lead_nuevo\" SOLO con los datos disponibles.\n3) Si existe, llama \"actualizar_lead_filtrado\" y envía únicamente los campos NUEVOS o CAMBIADOS.\n4) Si el cliente expresa interés, llama \"capturar_interes_avanzado\" y actualiza nivel_interes, objeciones, etc.\n5) Siempre actualiza \"ultima_actualizacion\" con la hora actual.\n- No envíes valores vacíos ni \"undefined\".\n- Evita duplicados: usa \"chat_id\" como clave de sesión.\n\n🧩 FORMATO DE PREGUNTAS (máximo 2 líneas, con cierre)\n- \"¿Cuál es tu nombre y ciudad? Te aparto el último.\"\n- \"Para coordinar envío, ¿me confirmas WhatsApp y dirección?\"\n- \"¿Te escribo al correo para confirmar?\"\n\n📦 POLÍTICAS\n- Bogotá: Contraentrega (llega mañana). Fuera de Bogotá: Pago anticipado (2-3 días).\n- Garantía total por defectos. WhatsApp para seguimiento.\n\n⚡ REGLAS DE ORO\n- NUNCA menciones que eres un bot.\n- SIEMPRE usa datos reales de herramientas.\n- CAPTURA y ACTUALIZA el lead después de CADA dato nuevo del cliente.\n- Máximo 2 productos por mensaje. Crea urgencia en CADA respuesta.\n- Termina SIEMPRE con pregunta de cierre.\n\n🚫 PROHIBIDO\n- Textos largos, respuestas genéricas, inventar precios o enlaces, ser pasiva.\n\n💡 RECUERDA: Cada mensaje es una oportunidad de VENTA. Sé directa, persuasiva y efectiva. ¡Eres la mejor vendedora de Colombia! 🇨🇴"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        1504,
        64
      ],
      "id": "05168a65-d7a6-459a-9641-b762805833ba",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "12345678-1234-1234-1234-123456789abc",
              "leftValue": "={{ $json.email_usuario }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        896,
        64
      ],
      "id": "6495a79b-9b8e-4ec3-8bf7-46f8eddfced8",
      "name": "¿Usuario Autenticado?"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ce8b2bf8-a12a-4a08-8220-f85cd93bf4ca",
              "name": "mensaje_del_usuario",
              "value": "={{ $json.body.mensaje || $json.query.mensaje || $json.params.mensaje || '' }}",
              "type": "string"
            },
            {
              "id": "36c0fc2a-c8c5-4bef-89b3-3c6465c4a1bf",
              "name": "email_usuario",
              "value": "={{ $json.body.usuario?.email || '' }}",
              "type": "string"
            },
            {
              "id": "1c7c45bd-992e-47c3-a8a4-ec2d935042bb",
              "name": "nombre",
              "value": "={{ $json.body.usuario?.nombre || '' }}",
              "type": "string"
            },
            {
              "id": "8323ff4e-1a26-4bd0-9d6c-1ff856cfd3c1",
              "name": "apellido",
              "value": "={{ $json.body.usuario?.apellido || '' }}",
              "type": "string"
            },
            {
              "id": "f9a7c2ab-9b77-4f1c-8f34-1f2b0dbe12c1",
              "name": "ciudad",
              "value": "={{ $json.body.usuario?.ciudad || '' }}",
              "type": "string"
            },
            {
              "id": "a4c8b1de-3c2a-4d7e-9f11-6d0c9b2e7f35",
              "name": "direccion",
              "value": "={{ $json.body.usuario?.direccion || '' }}",
              "type": "string"
            },
            {
              "id": "fe23d0bf-1197-448a-beac-5a67402a9f8e",
              "name": "whatsapp",
              "value": "={{ $json.body.usuario?.whatsapp || '' }}",
              "type": "string"
            },
            {
              "id": "dc5b36eb-df84-43ef-a51e-6673161fab56",
              "name": "tipo_consulta",
              "value": "={{ $json.body.usuario?.tipoConsulta || 'general' }}",
              "type": "string"
            },
            {
              "id": "d1e7bf93-7ca4-4105-b982-134d3a2dccee",
              "name": "autenticado",
              "value": "={{ $json.body.usuario?.autenticado || false }}",
              "type": "boolean"
            },
            {
              "id": "e25876bf-1f31-44e6-9b80-9ae4fb595873",
              "name": "pagina_origen",
              "value": "={{ $json.body.url || $json.query.url || 'chat-widget' }}",
              "type": "string"
            },
            {
              "id": "f1234567-1234-1234-1234-123456789abc",
              "name": "chat_id",
              "value": "={{ $json.body.chatId || $json.query.chatId || $json.query.chat || $json.params.chatId || '' }}",
              "type": "string"
            },
            {
              "id": "f2345678-2345-2345-2345-234567890bcd",
              "name": "timestamp",
              "value": "={{ $json.body.timestamp || new Date().toISOString() }}",
              "type": "string"
            },
            {
              "id": "f3456789-3456-3456-3456-345678901def",
              "name": "perfil_completo",
              "value": "={{ $json.body.perfilCompleto || false }}",
              "type": "boolean"
            },
            {
              "id": "f4567890-4567-4567-4567-456789012efg",
              "name": "plataforma",
              "value": "={{ $json.body.plataforma || 'ME LLEVO ESTO' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        704,
        64
      ],
      "id": "df3a93b0-8d7b-4722-99c3-189a6db9da4d",
      "name": "Procesar Datos Entrada"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat_web_mellevoesto",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        496,
        64
      ],
      "id": "bf92fb7a-2c7d-4a00-bfee-503d5d68744a",
      "name": "Webhook",
      "webhookId": "c97ed818-e9b6-4f45-afcd-ae25d080ce99"
    }
  ],
  "connections": {
    "Preparar Respuesta": {
      "main": [
        [
          {
            "node": "Responder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "capturar_interes_avanzado": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "crear_lead_nuevo": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "actualizar_lead_filtrado": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "consultar_imagenes": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "consultar_lead_por_chat_id": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "consultar_pedidos": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "buscar_productos": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Memoria Chat": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Preparar Respuesta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Usuario Autenticado?": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar Datos Entrada": {
      "main": [
        [
          {
            "node": "¿Usuario Autenticado?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Procesar Datos Entrada",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8000b702e0a3d9ac6d70099a2751603316de4028cd14af0949776a26efecb219"
  }
}